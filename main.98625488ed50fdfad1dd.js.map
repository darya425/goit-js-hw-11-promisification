{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","time","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","canProcess","id","logSuccess","result","logError","error","warn","amount","catch"],"mappings":"2JAiBMA,EAAQ,SAAAC,GACV,IAAMC,EAAOD,EACb,OAAO,IAAIE,SAAQ,SAACC,GAChBC,YAAW,WAAQD,EAAQF,KAAUD,OAIvCK,EAAS,SAAAJ,GAAI,OAAIK,QAAQC,IAAR,kBAA8BN,EAA9B,OAGvBF,EAAM,KAAMS,KAAKH,GACjBN,EAAM,KAAMS,KAAKH,GACjBN,EAAM,MAAMS,KAAKH,G,kCCxBXI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAK/D,OAAO,IAAIf,SAAQ,SAACC,GAClBA,EAAQY,OAINV,EAAS,SAAAU,GAAY,OAAIT,QAAQY,MAAMH,IAW7CH,EAAgBH,EAAO,SAASD,KAAKH,GACrCO,EAAgBH,EAAO,OAAOD,KAAKH,GC/BnC,IAIMc,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOpD,OAAO,IAAInB,SAAQ,SAACC,EAASuB,GAC3B,IAAMC,EAAaJ,KAAKE,SAAW,GAEnCrB,YAAW,WACLuB,GACFxB,EAAQ,eAAeiB,EAAYQ,GAA5B,iBAA+C7B,EAA/C,MAGT2B,EAAO,gCAAgCN,EAAYQ,GAA7C,+BACL7B,OAID8B,EAAa,SAAAC,GACjBxB,QAAQC,IAAR,GAAeuB,IAGXC,EAAW,SAAAC,GACf1B,QAAQ2B,KAAR,GAAgBD,IAclBb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/B1B,KAAKqB,GACLM,MAAMJ,GAETZ,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/B1B,KAAKqB,GACLM,MAAMJ,GAETZ,EAAgB,CAAES,GAAI,GAAIM,OAAQ,KAC/B1B,KAAKqB,GACLM,MAAMJ,GAETZ,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/B1B,KAAKqB,GACLM,MAAMJ,K","file":"main.98625488ed50fdfad1dd.js","sourcesContent":["// ================= task 1 ===================\r\n\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние\r\n// \"resolved\" через ms миллисекунд.Значением исполнившегося промиса должно быть\r\n// то кол - во миллисекунд которое передали во время вызова функции delay.\r\n\r\n// const delay = ms => {\r\n//     const time = ms;\r\n\r\n//     return new Promise((resolve) => {\r\n//         setTimeout(() => {\r\n//             resolve(time);\r\n//         }, ms);\r\n\r\n//     });\r\n// };\r\n\r\nconst delay = ms => {\r\n    const time = ms;\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => { resolve(time); }, ms);\r\n    });\r\n};\r\n \r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n","// ================= task 2 ===================\r\n\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  // callback(updatedUsers);\r\n\r\n  return new Promise((resolve) => {\r\n    resolve(updatedUsers);\r\n   });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","// ================= task 3 ===================\r\n\r\n//  Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  \r\n\r\n  return new Promise((resolve, reject) => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve(`Transaction ${transaction.id} processed in ${delay}ms`);\r\n      }\r\n      \r\n      reject(`Error processing transaction ${transaction.id}. Please try again later.`);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = result=> {\r\n  console.log(`${result}`);\r\n};\r\n\r\nconst logError = error => {\r\n  console.warn(`${error}`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}